import { Number, Record, Runtype, Static, String } from 'runtypes';

// This file is generated by runtyping (https://github.com/johngeorgewright/runtyping).
// Manual changes might be lost - proceed with caution!
export const A = <T extends any,>(T: Runtype<T>,) => Record({ type: T, });

export type A<T> = Static<ReturnType<typeof A<T>>>;

export const B = <T extends string,>(T: Runtype<T>,) => Record({ type: T, });

export type B<T extends string> = Static<ReturnType<typeof B<T>>>;

export const C = <T extends any,>(T: Runtype<T>,) => String.Or(T);

export type C<T> = Static<ReturnType<typeof C<T>>>;

export const D = <T extends number,>(T: Runtype<T>,) => Record({ type: T, });

export type D<T extends number> = Static<ReturnType<typeof D<T>>>;

export const E = Record({ foo: String, });

export type E = Static<typeof E>;

export const F = <T extends Static<typeof E>,>(T: Runtype<T>,) => Record({ type: T, });

export type F<T extends E> = Static<ReturnType<typeof F<T>>>;

export const G = Record({ abc: A(Record({ data: String, }),), });

export type G = Static<typeof G>;

export const Test = <T extends any,>(T: Runtype<T>,) => T.And(Record({ count: Number, }));

export type Test<T> = Static<ReturnType<typeof Test<T>>>;

export const Foo = Record({ abc: Test(Record({ data: String, }),), });

export type Foo = Static<typeof Foo>;
