import { Array, Dictionary, Lazy, Literal, Null, Number, Record, Runtype, Static, String, Undefined } from 'runtypes';
import { JSONSchema7 as _JSONSchema7, JSONSchema7Array as _JSONSchema7Array, JSONSchema7Definition as _JSONSchema7Definition, JSONSchema7Object as _JSONSchema7Object, JSONSchema7Type as _JSONSchema7Type } from 'json-schema/index';

// This file is generated by runtyping (https://github.com/johngeorgewright/runtyping).
// Manual changes might be lost - proceed with caution!
export const JSONSchema7Definition: Runtype<_JSONSchema7Definition> = Lazy(() => Literal(false).Or(Literal(true)).Or(JSONSchema7));

export type JSONSchema7Definition = Static<typeof JSONSchema7Definition>;

export const JSONSchema7TypeName = Literal("string").Or(Literal("number")).Or(Literal("boolean")).Or(Literal("object")).Or(Literal("integer")).Or(Literal("array")).Or(Literal("null"));

export type JSONSchema7TypeName = Static<typeof JSONSchema7TypeName>;

export const JSONSchema7Object: Runtype<_JSONSchema7Object> = Lazy(() => Dictionary(JSONSchema7Type, String));

export type JSONSchema7Object = Static<typeof JSONSchema7Object>;

export const JSONSchema7Array: Runtype<_JSONSchema7Array> = Lazy(() => Array(JSONSchema7Type));

export type JSONSchema7Array = Static<typeof JSONSchema7Array>;

export const JSONSchema7Type: Runtype<_JSONSchema7Type> = Lazy(() => Null.Or(String).Or(Number).Or(Literal(false)).Or(Literal(true)).Or(JSONSchema7Object).Or(JSONSchema7Array));

export type JSONSchema7Type = Static<typeof JSONSchema7Type>;

export const JSONSchema7: Runtype<_JSONSchema7> = Lazy(() => Record({ $id: String.Or(Undefined).optional(), $ref: String.Or(Undefined).optional(), $schema: String.Or(Undefined).optional(), $comment: String.Or(Undefined).optional(), $defs: Dictionary(JSONSchema7Definition, String).Or(Undefined).optional(), type: Literal("string").Or(Literal("number")).Or(Literal("boolean")).Or(Literal("object")).Or(Literal("integer")).Or(Literal("array")).Or(Literal("null")).Or(Array(JSONSchema7TypeName)).Or(Undefined).optional(), enum: Array(JSONSchema7Type).Or(Undefined).optional(), const: Null.Or(String).Or(Number).Or(Literal(false)).Or(Literal(true)).Or(JSONSchema7Object).Or(JSONSchema7Array).Or(Undefined).optional(), multipleOf: Number.Or(Undefined).optional(), maximum: Number.Or(Undefined).optional(), exclusiveMaximum: Number.Or(Undefined).optional(), minimum: Number.Or(Undefined).optional(), exclusiveMinimum: Number.Or(Undefined).optional(), maxLength: Number.Or(Undefined).optional(), minLength: Number.Or(Undefined).optional(), pattern: String.Or(Undefined).optional(), items: Literal(false).Or(Literal(true)).Or(JSONSchema7).Or(Array(JSONSchema7Definition)).Or(Undefined).optional(), additionalItems: Literal(false).Or(Literal(true)).Or(JSONSchema7).Or(Undefined).optional(), maxItems: Number.Or(Undefined).optional(), minItems: Number.Or(Undefined).optional(), uniqueItems: Literal(false).Or(Literal(true)).Or(Undefined).optional(), contains: JSONSchema7.Or(Undefined).optional(), maxProperties: Number.Or(Undefined).optional(), minProperties: Number.Or(Undefined).optional(), required: Array(String).Or(Undefined).optional(), properties: Dictionary(JSONSchema7Definition, String).Or(Undefined).optional(), patternProperties: Dictionary(JSONSchema7Definition, String).Or(Undefined).optional(), additionalProperties: Literal(false).Or(Literal(true)).Or(JSONSchema7).Or(Undefined).optional(), dependencies: Dictionary(Literal(false).Or(Literal(true)).Or(JSONSchema7).Or(Array(String)), String).Or(Undefined).optional(), propertyNames: Literal(false).Or(Literal(true)).Or(JSONSchema7).Or(Undefined).optional(), if: Literal(false).Or(Literal(true)).Or(JSONSchema7).Or(Undefined).optional(), then: Literal(false).Or(Literal(true)).Or(JSONSchema7).Or(Undefined).optional(), else: Literal(false).Or(Literal(true)).Or(JSONSchema7).Or(Undefined).optional(), allOf: Array(JSONSchema7Definition).Or(Undefined).optional(), anyOf: Array(JSONSchema7Definition).Or(Undefined).optional(), oneOf: Array(JSONSchema7Definition).Or(Undefined).optional(), not: Literal(false).Or(Literal(true)).Or(JSONSchema7).Or(Undefined).optional(), format: String.Or(Undefined).optional(), contentMediaType: String.Or(Undefined).optional(), contentEncoding: String.Or(Undefined).optional(), definitions: Dictionary(JSONSchema7Definition, String).Or(Undefined).optional(), title: String.Or(Undefined).optional(), description: String.Or(Undefined).optional(), default: Null.Or(String).Or(Number).Or(Literal(false)).Or(Literal(true)).Or(JSONSchema7Object).Or(JSONSchema7Array).Or(Undefined).optional(), readOnly: Literal(false).Or(Literal(true)).Or(Undefined).optional(), writeOnly: Literal(false).Or(Literal(true)).Or(Undefined).optional(), examples: Null.Or(String).Or(Number).Or(Literal(false)).Or(Literal(true)).Or(JSONSchema7Object).Or(JSONSchema7Array).Or(Undefined).optional(), }));

export type JSONSchema7 = Static<typeof JSONSchema7>;

export const A = Record({ foo: String, schema: JSONSchema7, });

export type A = Static<typeof A>;
