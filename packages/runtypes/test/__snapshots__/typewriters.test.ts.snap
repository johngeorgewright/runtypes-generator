// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`array 1`] = `
"import { Static, Array, String, Number, Record } from 'runtypes';

export const A = Record({ foo: String, });

export type A = Static<typeof A>;

export const B = Array(String.Or(Number).Or(A));

export type B = Static<typeof B>;
"
`;

exports[`boolean 1`] = `
"import { Static, Boolean } from 'runtypes';

export const A = Boolean;

export type A = Static<typeof A>;
"
`;

exports[`builtin 1`] = `
"import { Static, Record, InstanceOf } from 'runtypes';

export const A = Record({ a: InstanceOf(Uint8Array), });

export type A = Static<typeof A>;
"
`;

exports[`circular references 1`] = `
"import { Static, Lazy, Runtype, Record, Literal, Array } from 'runtypes';
import { Student as _Student, Teacher as _Teacher } from '../fixtures/circular-references';

export const Teacher: Runtype<_Teacher> = Lazy(() => Record({ type: Literal(\\"teacher\\"), students: Array(Student), reportsTo: Teacher, }));

export type Teacher = Static<typeof Teacher>;

export const Student: Runtype<_Student> = Lazy(() => Record({ type: Literal(\\"student\\"), teacher: Teacher, }));

export type Student = Static<typeof Student>;

export const User = Student.Or(Teacher);

export type User = Static<typeof User>;
"
`;

exports[`dont generate static types 1`] = `
"import { Record, Literal, String, Number } from 'runtypes';

export const One = Record({ type: Literal(\\"one\\"), value: String, });
export const Two = Record({ type: Literal(\\"two\\"), value: Number, });
export const Three = One.Or(Two);
"
`;

exports[`duplicate references 1`] = `
"import { Static, Record, Null, String } from 'runtypes';

export const FooType = Null.Or(String);

export type FooType = Static<typeof FooType>;

export const HorseType = Record({ a: FooType, b: FooType, });

export type HorseType = Static<typeof HorseType>;
"
`;

exports[`enum 1`] = `
"import { Static, Guard, Literal, String } from 'runtypes';
import { A as _A, B as _B, C as _C, E as _E } from '../fixtures/enum';

export const A = Guard((x: any): x is _A => Object.values(_A).includes(x));

export type A = Static<typeof A>;

export const B = Guard((x: any): x is _B => Object.values(_B).includes(x));

export type B = Static<typeof B>;

export const D = Literal(_C.A3).Or(Literal(_C.B3));

export type D = Static<typeof D>;

export const F = String.Or(Literal(_E.S));

export type F = Static<typeof F>;

export const G = Literal(_C.A3).Or(Literal(_C.B3)).Or(Literal(_C.C3)).Or(Literal(_E.S));

export type G = Static<typeof G>;
"
`;

exports[`function 1`] = `
"import { Static, Function } from 'runtypes';

export const A = Function;

export type A = Static<typeof A>;

export const B = Function;

export type B = Static<typeof B>;

export const C = Function;

export type C = Static<typeof C>;

export const D = Function;

export type D = Static<typeof D>;

export const E = Function;

export type E = Static<typeof E>;

export const F = Function;

export type F = Static<typeof F>;
"
`;

exports[`function with non-strict nulls 1`] = `
"import { Static, Function } from 'runtypes';

export const C = Function;

export type C = Static<typeof C>;
"
`;

exports[`generics 1`] = `
"import { Static, Runtype, Record, String } from 'runtypes';

export const A = <T extends any,>(T: Runtype<T>,) => Record({ type: T, });

export type A<T> = Static<ReturnType<typeof A<T>>>;

export const B = <T extends string,>(T: Runtype<T>,) => Record({ type: T, });

export type B<T extends string> = Static<ReturnType<typeof B<T>>>;

export const C = <T extends any,>(T: Runtype<T>,) => Record({ type: T, });

export type C<T> = Static<ReturnType<typeof C<T>>>;

export const D = <T extends number,>(T: Runtype<T>,) => Record({ type: T, });

export type D<T extends number> = Static<ReturnType<typeof D<T>>>;

export const E = Record({ foo: String, });

export type E = Static<typeof E>;

export const F = <T extends Static<typeof E>,>(T: Runtype<T>,) => Record({ type: T, });

export type F<T extends E> = Static<ReturnType<typeof F<T>>>;
"
`;

exports[`import 1`] = `
"import { Static, Record, String } from 'runtypes';

export const A = Record({ foo: String, });

export type A = Static<typeof A>;
"
`;

exports[`inheritance 1`] = `
"import { Static, Record, String, Number, Literal } from 'runtypes';

export const C = Record({ bar: String, foo: String, });

export type C = Static<typeof C>;

export const D = Record({ bar: Number, moo: String, foo: Number, car: String, });

export type D = Static<typeof D>;

export const E = Record({ imported: Literal(true), });

export type E = Static<typeof E>;
"
`;

exports[`interface 1`] = `
"import { Static, Record, String, Number, Boolean, Literal, Function } from 'runtypes';

export const A = Record({ foo: String, bar: Number, [\`has spaces\`]: Boolean, [\`+1\`]: Boolean, [\`-1\`]: Boolean, __underscores__: Boolean, $dollar: Boolean, [\`\\\\\${escaped template vars}\`]: Boolean, });

export type A = Static<typeof A>;

export const B = Record({ a: A, b: Literal(\\"B\\"), });

export type B = Static<typeof B>;

export const C = Record({ foo: Function, bar: Number, boo: Function, });

export type C = Static<typeof C>;
"
`;

exports[`intersection 1`] = `
"import { Static, Record, String } from 'runtypes';

export const A = Record({ foo: String, });

export type A = Static<typeof A>;

export const B = Record({ bar: String, });

export type B = Static<typeof B>;

export const C = A.And(B);

export type C = Static<typeof C>;
"
`;

exports[`json schema 1`] = `
"import { Static, Record, Tuple, Dictionary, Unknown, String, Undefined } from 'runtypes';

export const ExampleSchema = Record({ testArray: Tuple().Or(Tuple(Dictionary(Unknown, String),)).Or(Tuple(Dictionary(Unknown, String), Dictionary(Unknown, String),)).Or(Undefined).optional(), });

export type ExampleSchema = Static<typeof ExampleSchema>;
"
`;

exports[`json schema 2`] = `
"import { Static, Record, Tuple, Dictionary, Unknown, String, Undefined } from 'runtypes';

export const ExampleSchema = Record({ testArray: Tuple(Dictionary(Unknown, String), Dictionary(Unknown, String), Dictionary(Unknown, String),).Or(Undefined).optional(), });

export type ExampleSchema = Static<typeof ExampleSchema>;
"
`;

exports[`json schema 3`] = `
"import { Static, Record, String, Number, Undefined, Literal } from 'runtypes';

export const ExampleSchema = Record({ firstName: String, lastName: String, age: Number.Or(Undefined).optional(), hairColor: Literal(\\"black\\").Or(Literal(\\"brown\\")).Or(Literal(\\"blue\\")).Or(Undefined).optional(), });

export type ExampleSchema = Static<typeof ExampleSchema>;
"
`;

exports[`literal 1`] = `
"import { Static, Literal } from 'runtypes';

export const A = Literal(\\"foo\\");

export type A = Static<typeof A>;

export const B = Literal(2);

export type B = Static<typeof B>;

export const C = Literal(true);

export type C = Static<typeof C>;
"
`;

exports[`mapRuntypeName 1`] = `
"import { Static, Record, String, Array } from 'runtypes';

export const MappedAFoo = Record({ foo: String, });

export type MappedABar = Static<typeof MappedAFoo>;

export const MappedBFoo = Record({ bar: MappedAFoo, baz: MappedAFoo, nest: Record({ baz2: Array(MappedAFoo), }), });

export type MappedBBar = Static<typeof MappedBFoo>;
"
`;

exports[`namespace 1`] = `
"import { Static, Record, String, Number, Unknown } from 'runtypes';

export namespace A {
  export const B = Record({ C: String, });

  export type B = Static<typeof B>;

  export const C = Unknown;

  export type C = Static<typeof C>;

  export const D = Record({ E: Number, });

  export type D = Static<typeof D>;
}

export namespace B {
  export namespace C {
    export const D = Number;

    export type D = Static<typeof D>;
  }
}
"
`;

exports[`non-strict nulls 1`] = `
"import { Static, Null, String, Record } from 'runtypes';

export const A = Null;

export type A = Static<typeof A>;

export const B = String;

export type B = Static<typeof B>;

export const C = Record({ a: Null, b: String, c: String.optional(), });

export type C = Static<typeof C>;
"
`;

exports[`numbers 1`] = `
"import { Static, Number } from 'runtypes';

export const A = Number;

export type A = Static<typeof A>;
"
`;

exports[`optional property 1`] = `
"import { Static, Record, String, Undefined } from 'runtypes';

export const A = Record({ foo: String.Or(Undefined).optional(), });

export type A = Static<typeof A>;
"
`;

exports[`record 1`] = `
"import { Static, Dictionary, String } from 'runtypes';

export const A = Dictionary(String, String);

export type A = Static<typeof A>;
"
`;

exports[`recursive 1`] = `
"import { Static, Lazy, Runtype, Record, String, Array } from 'runtypes';
import { A as _A, B as _B } from '../fixtures/recursive';

export const A: Runtype<_A> = Lazy(() => Record({ recurse: String.Or(A), }));

export type A = Static<typeof A>;

export const B: Runtype<_B> = Lazy(() => Record({ recurse: Array(B), }));

export type B = Static<typeof B>;
"
`;

exports[`strict nulls 1`] = `
"import { Static, Null, String, Record, Undefined } from 'runtypes';

export const A = Null;

export type A = Static<typeof A>;

export const B = Null.Or(String);

export type B = Static<typeof B>;

export const C = Record({ a: Null, b: Null.Or(String), c: Null.Or(String).Or(Undefined).optional(), });

export type C = Static<typeof C>;
"
`;

exports[`strings 1`] = `
"import { Static, String } from 'runtypes';

export const A = String;

export type A = Static<typeof A>;
"
`;

exports[`tuple 1`] = `
"import { Static, Tuple, Number, String } from 'runtypes';

export const A = Tuple(Number, String, Number,);

export type A = Static<typeof A>;

export const B = Tuple(A, A,);

export type B = Static<typeof B>;
"
`;

exports[`union 1`] = `
"import { Static, String, Number } from 'runtypes';

export const C = String.Or(Number);

export type C = Static<typeof C>;
"
`;
