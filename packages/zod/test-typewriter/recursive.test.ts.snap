// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`recursive: 
    "import { A as _A, B as _B } from './recursive';
    import { Lazy, Runtype, Record, String, Static, Array } from 'runtypes';

    export const A: Runtype<_A> = Lazy(() => Record({ recurse: String.Or(A), }));

    export type A = Static<typeof A>;

    export const B: Runtype<_B> = Lazy(() => Record({ recurse: Array(B), }));

    export type B = Static<typeof B>;
    "
   1`] = `
"import { A as _A, B as _B } from './recursive';
import { infer as Infer, lazy, ZodType, object, string, array } from 'zod';

export const A: ZodType<_A> = lazy(() => object({ recurse: string().or(A), }));

export type A = Infer<typeof A>;

export const B: ZodType<_B> = lazy(() => object({ recurse: array(B), }));

export type B = Infer<typeof B>;
"
`;
