import { Project, InterfaceDeclaration, TypeAliasDeclaration } from 'ts-morph'
import { writeFile } from 'fs/promises'
import { Instruction } from './types'
import renderType from './renderType'

export default async function generate({
  buildInstructions,
  project,
}: {
  buildInstructions: Instruction[]
  project: Project
}) {
  const diagnostics = project.getPreEmitDiagnostics()

  const allTargetFiles = buildInstructions.map(
    (buildInstruction) => buildInstruction.targetFile
  )

  const filteredDiagnostics = diagnostics.filter(
    (diagnostic) =>
      !allTargetFiles.some((targetFile) =>
        diagnostic.getSourceFile()?.getFilePath().includes(targetFile)
      )
  )

  console.log(project.formatDiagnosticsWithColorAndContext(filteredDiagnostics))

  const generatedFilePreamble = `
// this file is AUTOMATICALLY GENERATED by runtypes-generator.
// It includes Runtypes definitions for TypeScript types; so you can validate them at runtime:
`

  await Promise.all(
    buildInstructions.map(async (buildInstruction) => {
      const imports = new Set<string>()

      const typeDeclarations = buildInstruction.sourceTypes.map(
        (sourceType) => {
          let typeDeclaration: InterfaceDeclaration | TypeAliasDeclaration
          const sourceFile = project.getSourceFileOrThrow(sourceType.file)

          try {
            try {
              typeDeclaration = sourceFile.getInterfaceOrThrow(sourceType.type)
            } catch (error) {
              typeDeclaration = sourceFile.getTypeAliasOrThrow(sourceType.type)
            }
          } catch (error) {
            throw new Error(`No interface of type called ${sourceType.type}.`)
          }

          const runtype = `export const ${sourceType.type} = ${renderType(
            typeDeclaration.getType(),
            0,
            imports
          )};\n`

          imports.add('Static')
          const staticType = `export type ${sourceType.type} = Static<typeof ${sourceType.type}>;`
          return runtype + staticType
        }
      )

      const importStatement = `\nimport { ${[...imports]
        .sort()
        .join(', ')} } from 'runtypes';\n\n`

      const fileContents =
        generatedFilePreamble + importStatement + typeDeclarations.join('\n\n')

      await writeFile(buildInstruction.targetFile, fileContents, 'utf8')

      console.log(`Generated ${buildInstruction.targetFile}`)
    })
  )

  console.log('All done!')
}
